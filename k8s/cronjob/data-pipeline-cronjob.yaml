apiVersion: batch/v1
kind: CronJob
metadata:
  name: data-pipeline-cron
  namespace: default
spec:
  schedule: "@weekly"  # Every Sunday at midnight UTC
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: pipeline-runner
          containers:
          - name: pipeline-runner
            image: bitnami/kubectl:latest
            command: ["/bin/bash"]
            args:
            - -c
            - |
              set -e
              
              jobs=(
                "01-collect-job-listings"
                "02-clean-duplicate-ids"
                "03-enrich-job-listings"
                "04-clean-duplicate-descriptions"
                "05-extract-gemini"
                "04-clean-duplicate-descriptions"
              )
              
              for job in "${jobs[@]}"; do
                echo "Starting job: $job"
                   
                echo "Extracting job YAML"
                job_yaml=$(kubectl get configmap "job-$job" -n default -o jsonpath="{.data['$job\.yaml']}")

                if [ -z "$job_yaml" ]; then
                  echo "Error: job YAML is empty for $job"
                  exit 1
                fi
                
                echo "Modifying job name"
                timestamp=$(date +%s)
                job_name="${job}-${timestamp}"
                modified_yaml=$(echo "$job_yaml" | awk -v new_name="$job_name" '
                  /kind: Job/,/spec:/ {
                    if ($1 == "name:") {
                      print "  name: " new_name
                      next
                    }
                  }
                  {print}
                ')

                echo "Applying job YAML"
                echo "$modified_yaml" | kubectl apply -f - -n default
                
                echo "Waiting for job $job_name to complete..."
                if ! kubectl wait --for=condition=complete "job/$job_name" -n default --timeout=48h; then
                  echo "Job $job_name failed or timed out"
                  kubectl logs "job/$job_name" -n default
                  kubectl delete job "$job_name" -n default
                  exit 1
                fi
                
                echo "Job $job_name completed successfully"
                kubectl delete job "$job_name" -n default
              done
              
              echo "All jobs completed successfully"
          restartPolicy: OnFailure